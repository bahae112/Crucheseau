#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int x, y;
} etat;

typedef struct Noeud {
    struct Noeud* suivant;
    etat Etat;
} noeud;

typedef struct Noeud* liste;  /* Pile LIFO*/
liste *listeNoeuds;
liste NoeudsDejaTraites;
int n;

void inserer(etat etatCourant, liste* l) {   //changement juste au niveau des pointeurs 
    noeud* nouveauNoeud = (noeud*)malloc(sizeof(noeud));
    if (!nouveauNoeud) {
        printf("Erreur d'allocation mémoire.\n");
        exit(1);
    }
    nouveauNoeud->Etat = etatCourant;
    nouveauNoeud->suivant = *l;
    *l = nouveauNoeud;
    printf("%i %i \n", (*l)->Etat.x, (*l)->Etat.y);
}

etat Extraire(liste* l) {           //changement car on doit recuperer le dernier element 
    if (*l == NULL) {
        printf("La liste est vide, impossible d'extraire.\n");
        exit(1);
    }

    if ((*l)->suivant == NULL) {
        // La liste contient un seul élément
        etat etatCourant = (*l)->Etat;
        free(*l);
        *l = NULL;
        return etatCourant;
    }

    noeud* temp = *l;
    noeud* avantDernier = NULL;
    while (temp->suivant != NULL) {
        avantDernier = temp;
        temp = temp->suivant;
    }

    etat etatCourant = temp->Etat;
    free(temp);
    avantDernier->suivant = NULL;
    return etatCourant;
}
int etatSolution(etat e) {
    return (e.x == 2&& e.y == 0);
}

int appartient(etat e, liste l) {
    noeud* temp = l;              //changement car on a pas l.debut
    while (temp != NULL) {
        if (temp->Etat.x == e.x && temp->Etat.y == e.y) {
            return 1;
        }
        temp = temp->suivant;
    }
    return 0;
}

void genereSuccesseurs(etat et) {
    int x0 = et.x, y0 = et.y, m;
    etat e;
    // Remplir la première cruche
    if (x0 < 4) {
        e.x = 4;
        e.y = y0;
        inserer(e, &listeNoeuds);
    }
    // Vider la première cruche
    if (x0 > 0) {
        e.x = 0;
        e.y = y0;
        inserer(e, &listeNoeuds);
    }
    // Remplir la seconde cruche
    if (y0 < 3) {
        e.y = 3;
        e.x = x0;
        inserer(e, &listeNoeuds);
    }
    // Vider la seconde cruche
    if (y0 > 0) {
        e.y = 0;
        e.x = x0;
        inserer(e, &listeNoeuds);
    }
    // Transvaser de la première à la seconde cruche
    if (x0 > 0 && y0 < 3) {
        m = fmin(x0, 3 - y0);
        e.x = x0 - m;
        e.y = y0 + m;
        inserer(e, &listeNoeuds);
    }
    // Transvaser de la seconde à la première cruche
    if (y0 > 0 && x0 < 4) {
        m = fmin(4 - x0, y0);
        e.x = x0 + m;
        e.y = y0 - m;
        inserer(e, &listeNoeuds);
    }
}

void RechercheLongueur(etat etatInitial, etat etatFinal)
{ liste NoeudsDejaTraites;
etat etatCourant;
listeNoeuds = NULL;
inserer(etatInitial, &listeNoeuds);
NoeudsDejaTraites = NULL;
while (listeNoeuds!=NULL)
{
etatCourant =Extraire (&listeNoeuds);
n++;
if (etatSolution (etatCourant))
{
printf("\nSucces ! Arret sur le noeud :(%d, %d)\n\nNombre de nœuds explores : %d\n", etatCourant.x, etatCourant.y, n);
exit(0);
}
else if (appartient (etatCourant, NoeudsDejaTraites)==0)
{ genereSuccesseurs (etatCourant);
inserer (etatCourant, &NoeudsDejaTraites);
}
}
puts("\nPas de solution");
}

int main() {
    etat etatInitial = {0, 0};
    etat etatFinal = {2, 0}; // Ajustez cet état final selon le problème
    RechercheLongueur(etatInitial, etatFinal);
    printf("le nombre de noeuds : %i",n);
    return 0;
}
